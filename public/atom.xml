<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Philip Q Nguyen's blog]]></title>
  <link href="http://blog.ninjacorner.com/atom.xml" rel="self"/>
  <link href="http://blog.ninjacorner.com/"/>
  <updated>2014-11-01T21:32:05-07:00</updated>
  <id>http://blog.ninjacorner.com/</id>
  <author>
    <name><![CDATA[Philip Q Nguyen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Angular.js Vocabs!]]></title>
    <link href="http://blog.ninjacorner.com/blog/2014/11/01/angular-dot-js-vocabs/"/>
    <updated>2014-11-01T20:41:53-07:00</updated>
    <id>http://blog.ninjacorner.com/blog/2014/11/01/angular-dot-js-vocabs</id>
    <content type="html"><![CDATA[<p>I have been studying Angular all week, and what better than to read the <a href="https://docs.angularjs.org/api">docs</a> and summarize some of the most commonly used terms in Angular. <!-- more --></p>

<p>Controller: The controller contains business logic used to populate the scope with functions and values.</p>

<p>Scope: Scope is a container of functions and values originally defined in the controller. These functions and values can be binded into the views, within the scoped areas.</p>

<p>Directive: Directives are markers placed within the DOM. When a specific directive is activated, it will perform the behaviour that was defined in it. Angular comes with a lot of built-in directives, for example: <code>ng-controller="SomeController"</code> will create a scope defined in SomeController within the nested DOM elements, making those functions and properties available for use. In addition, custom directives can be defined.</p>

<p>Data binding: This is one of Angular&rsquo;s most powerful selling points. Data are synchronized both ways between the views and the models.</p>

<p>Module: Modules are simply containers of code, used for organizational purposes.</p>

<p>Dependency injection: Functions from other models can be transferred to another module via Dependency Injection.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[API Versioning for the Front End]]></title>
    <link href="http://blog.ninjacorner.com/blog/2014/10/29/api-versioning-for-the-front-end/"/>
    <updated>2014-10-29T16:33:58-07:00</updated>
    <id>http://blog.ninjacorner.com/blog/2014/10/29/api-versioning-for-the-front-end</id>
    <content type="html"><![CDATA[<p>First of all, this is not a post comparing the different types of strategies. While there are many types of API versioning, and a great blog post about each of those strategies have been discussed by <a href="http://urthen.github.io/2013/05/09/ways-to-version-your-api/">Michael Pratt</a>, I&rsquo;m just going to focus on the strategy that I have chosen for my project. <!-- more --></p>

<p>I&rsquo;m currently working on an Angular.js project here at Code Fellows, and in order to get Angular working with Rails, we need to talk about API&rsquo;s. In that sense, we need to talk about an API versioning strategy. Since this project is small and the only client that will be talking to my backend API is the front-end Angular app, it more or less narrowed down my choices.</p>

<p>Adding a /api_v1/ to my URI is the simplest. While this could be a headache when you are changing versions regularly, it isn&rsquo;t much for me when I am the only client consuming the data. For projects with multiple API consumers, you have to keep multiple versions of the API so you don&rsquo;t break them. In rails, by embedding the api version into the URI, you may end up having a ton of api version controllers, and that can be a pain!</p>

<p>In my case, since I am in full controll of both the front-end and the back-end, changing versions and breaking people&rsquo;s projects is not an issue for me. For all I know, I&rsquo;ll be on /api_v1/ for a very long time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Paperclip With AWS S3 Demo Running on Rails 4.0.0]]></title>
    <link href="http://blog.ninjacorner.com/blog/2014/10/26/paperclip-with-aws-s3-demo-running-on-rails-4-dot-0-0/"/>
    <updated>2014-10-26T20:43:56-07:00</updated>
    <id>http://blog.ninjacorner.com/blog/2014/10/26/paperclip-with-aws-s3-demo-running-on-rails-4-dot-0-0</id>
    <content type="html"><![CDATA[<p>This is a tutorial and demo to get Paperclip with AWS S3 uploads running on rails 4.0.0. The source code can be found <a href="https://github.com/philipqnguyen/paperclip-example">here</a>. This demo was created as part of the Code Fellows&#8217; <a href="https://github.com/uploaders">Uploaders group</a>.</p>

<p>In this tutorial, we will make a simple site where articles can be created and pictures can be upload as part of the articles using the Paperclip gem. <!-- more --></p>

<h2>Step 1 &ndash; Ensure you have all dependencies</h2>

<p>Make sure you have an AWS account with an S3 bucket. Keep your access key and your secret access key handy because we will need it in a few steps.</p>

<p>Ensure that you have ImageMagick installed. If you don&rsquo;t, you can install it via Homebrew with <code>brew install imagemagick</code></p>

<p>If you don&rsquo;t already have Rails 4.0.0, you can get it by typing this in your terminal: <code>gem install rails --version 4.0.0</code></p>

<p>Create a new rails app with <code>rails _4.0.0_ new &lt;appname&gt;</code></p>

<p>In your Gemfile, add:</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;paperclip&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 4.2&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;aws-sdk&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 1.55.0&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then run <code>bundle install</code>.</p>

<h2>Step 2 &ndash; Make the articles</h2>

<p>For the purpose of this demo, we will generate an Article scaffold to save some time. <code>rails g scaffold Article title:string body:text</code></p>

<p>Run <code>bundle exec rake db:migrate</code></p>

<p>In your config/routes.rb, add <code>root 'articles#index'</code>.</p>

<h2>Step 3 &ndash; Add Paperclip</h2>

<p>Run <code>rails g paperclip article pic</code> in order to add a the &ldquo;pic&rdquo; column to the Articles table. Then, <code>bundle exec rake db:migrate</code>.</p>

<p>Add the following to the model, Article.rb:</p>

<figure class='code'><figcaption><span>Article.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">has_attached_file</span> <span class="ss">:pic</span><span class="p">,</span> <span class="ss">:styles</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:medium</span> <span class="o">=&gt;</span> <span class="s2">&quot;300x300&gt;&quot;</span><span class="p">,</span> <span class="ss">:thumb</span> <span class="o">=&gt;</span> <span class="s2">&quot;100x100&gt;&quot;</span> <span class="p">},</span> <span class="ss">:default_url</span> <span class="o">=&gt;</span> <span class="s2">&quot;/images/:style/missing.png&quot;</span>
</span><span class='line'>  <span class="n">validates_attachment_content_type</span> <span class="ss">:pic</span><span class="p">,</span> <span class="ss">:content_type</span> <span class="o">=&gt;</span> <span class="sr">/\Aimage\/.*\Z/</span>
</span></code></pre></td></tr></table></div></figure>


<p>That will create two additional versions of each pic that is uploaded, a medium and a thumbnail version. In addition, it will also validate that the file is an image. You can make changes to the sizes or add additional variations if you want.</p>

<p>Add <code>&lt;%= image_tag @article.pic.url(:medium) %&gt;</code> to the article&rsquo;s show page.</p>

<p>Add <code>&lt;%= f.file_field :pic %&gt;</code> in your form and add <code>:html =&gt; { :multipart =&gt; true }</code> to the top of your form so that it looks like this:</p>

<figure class='code'><figcaption><span>_form.html.erb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">form_for</span><span class="p">(</span><span class="vi">@article</span><span class="p">,</span> <span class="ss">:html</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:multipart</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="p">})</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">if</span> <span class="vi">@article</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">any?</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    &lt;div id=&quot;error_explanation&quot;&gt;</span>
</span><span class='line'><span class="x">      &lt;h2&gt;</span><span class="cp">&lt;%=</span> <span class="n">pluralize</span><span class="p">(</span><span class="vi">@article</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">count</span><span class="p">,</span> <span class="s2">&quot;error&quot;</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="x"> prohibited this article from being saved:&lt;/h2&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">      &lt;ul&gt;</span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;%</span> <span class="vi">@article</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">full_messages</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">msg</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">        &lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">msg</span> <span class="cp">%&gt;</span><span class="x">&lt;/li&gt;</span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">      &lt;/ul&gt;</span>
</span><span class='line'><span class="x">    &lt;/div&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">file_field</span> <span class="ss">:pic</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  &lt;div class=&quot;field&quot;&gt;</span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:title</span> <span class="cp">%&gt;</span><span class="x">&lt;br&gt;</span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:title</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;/div&gt;</span>
</span><span class='line'><span class="x">  &lt;div class=&quot;field&quot;&gt;</span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:body</span> <span class="cp">%&gt;</span><span class="x">&lt;br&gt;</span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_area</span> <span class="ss">:body</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;/div&gt;</span>
</span><span class='line'><span class="x">  &lt;div class=&quot;actions&quot;&gt;</span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">submit</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;/div&gt;</span>
</span><span class='line'><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h2>Step 4 &ndash; Configure Paperclip and try it!</h2>

<p>Add this to your config/environments/development.rb. Also add it to your production.rb if you plan to use this in production.</p>

<figure class='code'><figcaption><span>development.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="no">Paperclip</span><span class="o">.</span><span class="n">options</span><span class="o">[</span><span class="ss">:command_path</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;/usr/local/bin/&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">paperclip_defaults</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">:storage</span> <span class="o">=&gt;</span> <span class="ss">:s3</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:s3_credentials</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="ss">:bucket</span> <span class="o">=&gt;</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;S3_BUCKET_NAME&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:access_key_id</span> <span class="o">=&gt;</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;AWS_ACCESS_KEY_ID&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:secret_access_key</span> <span class="o">=&gt;</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;AWS_SECRET_ACCESS_KEY&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you need to add the S3 bucket name, S3 access key and S3 secret access key into your shell profile. If you are on a Mac and using bash, put this into your .bash_profile:</p>

<figure class='code'><figcaption><span>.bash_profile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">export</span> <span class="no">S3_BUCKET_NAME</span><span class="o">=</span><span class="s2">&quot;&lt;name of your bucket&gt;&quot;</span>
</span><span class='line'><span class="n">export</span> <span class="no">AWS_ACCESS_KEY_ID</span><span class="o">=</span><span class="s2">&quot;&lt;your key&gt;&quot;</span>
</span><span class='line'><span class="n">export</span> <span class="no">AWS_SECRET_ACCESS_KEY</span><span class="o">=</span><span class="s2">&quot;&lt;your secret key&gt;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Launch the server and try it out. If you get an error upon uploading a picture that says: “The bucket you are attempting to access must be addressed using the specified endpoint. Please send all future requests to this endpoint.” You will need to add this <code>:s3_host_name =&gt; 's3-us-west-2.amazonaws.com'</code> into your development.rb and likewise in your production.rb so that it looks like this:</p>

<figure class='code'><figcaption><span>development.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="no">Paperclip</span><span class="o">.</span><span class="n">options</span><span class="o">[</span><span class="ss">:command_path</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;/usr/local/bin/&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">paperclip_defaults</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">:storage</span> <span class="o">=&gt;</span> <span class="ss">:s3</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:s3_credentials</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="ss">:bucket</span> <span class="o">=&gt;</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;S3_BUCKET_NAME&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:s3_host_name</span> <span class="o">=&gt;</span> <span class="s1">&#39;s3-us-west-2.amazonaws.com&#39;</span><span class="p">,</span> <span class="c1"># this</span>
</span><span class='line'>      <span class="ss">:access_key_id</span> <span class="o">=&gt;</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;AWS_ACCESS_KEY_ID&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:secret_access_key</span> <span class="o">=&gt;</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;AWS_SECRET_ACCESS_KEY&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now it should work. I hope this helps!</p>

<h2>References used in this tutorial</h2>

<p><a href="https://devcenter.heroku.com/articles/paperclip-s3">Heroku</a> has great documentation as well as the original
<a href="https://github.com/thoughtbot/paperclip">Paperclip</a> documentation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Opening Up Pundit]]></title>
    <link href="http://blog.ninjacorner.com/blog/2014/10/05/opening-up-pundit/"/>
    <updated>2014-10-05T21:24:02-07:00</updated>
    <id>http://blog.ninjacorner.com/blog/2014/10/05/opening-up-pundit</id>
    <content type="html"><![CDATA[<p>I recently used <a href="https://github.com/elabs/pundit">Pundit</a> as an authorization tool as part of my assignments at Code Fellows. I&rsquo;ve been told that it is extremely lightweight, but I had no idea just how lightweight it was until I opened it up and went through the code line by line.</p>

<p>Pundit provides a <code>module Pundit</code>, with all the logic in it. There is also a <code>class PolicyFinder</code> within the module that gives Pundit its capability to match controller actions and objects to its proper class policies.<!-- more --></p>

<p>Probably the best way to understand Pundit is to start with one of the helper methods that it provides and follow along with its code executions. The most commonly used method that Pundit provides is <code>authorize</code>. Let&rsquo;s take a look at it. I&rsquo;ve added comments to the original code to give some additional information.</p>

<p><code>authorize</code> is defined as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">authorize</span><span class="p">(</span><span class="n">record</span><span class="p">,</span> <span class="n">query</span><span class="o">=</span><span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="n">query</span> <span class="o">||=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:action</span><span class="o">].</span><span class="n">to_s</span> <span class="o">+</span> <span class="s2">&quot;?&quot;</span> <span class="c1"># Appends ? to name of controller action</span>
</span><span class='line'>  <span class="vi">@_policy_authorized</span> <span class="o">=</span> <span class="kp">true</span> <span class="c1"># Flag to be used in #verify_authorized</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">policy</span> <span class="o">=</span> <span class="n">policy</span><span class="p">(</span><span class="n">record</span><span class="p">)</span> <span class="c1"># calls policy with the record object and through other helper_methods, it instantiates the class policy. For example, ArticlePolicy.new(user, record)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">unless</span> <span class="n">policy</span><span class="o">.</span><span class="n">public_send</span><span class="p">(</span><span class="n">query</span><span class="p">)</span> <span class="c1"># sends method? to the class policy. For example, it sends #create? to ArticlePolicy. If it is false, raise errors, otherwise return true.</span>
</span><span class='line'>    <span class="n">error</span> <span class="o">=</span> <span class="no">NotAuthorizedError</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;not allowed to </span><span class="si">#{</span><span class="n">query</span><span class="si">}</span><span class="s2"> this </span><span class="si">#{</span><span class="n">record</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">error</span><span class="o">.</span><span class="n">query</span><span class="p">,</span> <span class="n">error</span><span class="o">.</span><span class="n">record</span><span class="p">,</span> <span class="n">error</span><span class="o">.</span><span class="n">policy</span> <span class="o">=</span> <span class="n">query</span><span class="p">,</span> <span class="n">record</span><span class="p">,</span> <span class="n">policy</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">raise</span> <span class="n">error</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Authorize takes a parameter, record, which is an object that needs to be checked for authorization. The first two lines are self explanatory. The meat of it is when it does <code>policy = policy(record)</code>. the #policy(record) method is another helper method defined as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">policy</span><span class="p">(</span><span class="n">record</span><span class="p">)</span> <span class="c1"># Accepts the record and calls singleton #policy! on Pundit.</span>
</span><span class='line'>  <span class="vi">@_policy</span> <span class="ow">or</span> <span class="no">Pundit</span><span class="o">.</span><span class="n">policy!</span><span class="p">(</span><span class="n">pundit_user</span><span class="p">,</span> <span class="n">record</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, it uses either an already provided policy (<code>@_policy</code>), or it will call the singleton method <code>#policy!(pundit_user, record)</code> on the <code>module Pundit</code>. <code>pundit_user</code> is simply defined as <code>current_user</code>. Let&rsquo;s take a look at the singleton method <code>#policy!</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span> <span class="c1"># Opens up Pundit&#39;s singletons. All methods inside are singletons</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">#... other code ...</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">policy!</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">record</span><span class="p">)</span> <span class="c1"># Finds the class policy and calls #new. Example: ArticlePolicy.new(user, record) and then admin&#39;s codes take over.</span>
</span><span class='line'>    <span class="no">PolicyFinder</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">record</span><span class="p">)</span><span class="o">.</span><span class="n">policy!</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">record</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>It instantiates <code>PolicyFinder</code> with the <code>record</code> argument, calls <code>#policy!</code>, and then it instantiates the result of that. Yes, it is a bit confusing if we stop here. Essentially, what it is doing is that the <code>PolicyFinder</code>, a class inside the Pundit module, is tasked with the sole purpose of finding a matching class policy. For example, if the record object is an <code>@article</code> object that is called within the <code>ArticleController</code>, <code>PolicyFinder.new(@article).policy!</code> will find the corresponding <code>ArticlePolicy</code>. Once it is found, this will occur: <code>ArticlePolicy.new(user, @article)</code>. <code>ArticlePolicy</code> is where all of the rules will be custom defined by the administrator of the Rails app.</p>

<p>If you don&rsquo;t believe me, we can dive deeper by taking a look at the <code>#policy!(user, record)</code> inside the <code>class PolicyFinder</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Pundit</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">PolicyFinder</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># ... Other method definitions....</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">policy!</span> <span class="c1"># Calls policy if it exists or raise error</span>
</span><span class='line'>      <span class="n">policy</span> <span class="ow">or</span> <span class="k">raise</span> <span class="no">NotDefinedError</span><span class="p">,</span> <span class="s2">&quot;unable to find policy </span><span class="si">#{</span><span class="n">find</span><span class="si">}</span><span class="s2"> for </span><span class="si">#{</span><span class="n">object</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># ... other definitions ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, <code>#policy!</code> is another helper method to raise an error if there is no policy, otherwise call <code>#policy</code>, which is also found inside the <code>class PolicyFinder</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Pundit</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">PolicyFinder</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># ... Other method definitions ...</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">policy</span> <span class="c1"># Finds the class and then returns the class policy.</span>
</span><span class='line'>      <span class="n">klass</span> <span class="o">=</span> <span class="n">find</span>
</span><span class='line'>      <span class="n">klass</span> <span class="o">=</span> <span class="n">klass</span><span class="o">.</span><span class="n">constantize</span> <span class="k">if</span> <span class="n">klass</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">String</span><span class="p">)</span>
</span><span class='line'>      <span class="n">klass</span> <span class="c1"># Returns policy class. Ex) ArticlePolicy</span>
</span><span class='line'>    <span class="k">rescue</span> <span class="no">NameError</span>
</span><span class='line'>      <span class="kp">nil</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># ... other method definitions ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, it uses the <code>find</code> method to find the name of the class policy and if it is a string, it will constantize it. Otherwise it returns nil if it could not return the name of the class policy.</p>

<p>The <code>find</code> method is defined as the following (I added in a lot of comments to help you along the way):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Pundit</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">PolicyFinder</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># ... Other method definitions ...</span>
</span><span class='line'>    <span class="c1"># The first two conditions will fail if policy_class is not defined in the model. Policy_class is used when you want to have an object associated with a differently named policy.</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># The following conditions will prepend the class name to the policy. For instance, Article will be prepend into &#39;Policy&#39; making it ArticlePolicy.</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">find</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">object</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="ss">:policy_class</span><span class="p">)</span>
</span><span class='line'>        <span class="n">object</span><span class="o">.</span><span class="n">policy_class</span> <span class="c1"># Returns WhateverPolicy if policy_class is defined in the object&#39;s model.</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="n">object</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="ss">:policy_class</span><span class="p">)</span>
</span><span class='line'>        <span class="n">object</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">policy_class</span> <span class="c1"># Returns WhateverPolicy if policy_class is defined in the object&#39;s model.</span>
</span><span class='line'>      <span class="k">else</span>  <span class="c1"># These conditions below is for objects queried</span>
</span><span class='line'>        <span class="n">klass</span> <span class="o">=</span> <span class="k">if</span> <span class="n">object</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="ss">:model_name</span><span class="p">)</span>
</span><span class='line'>          <span class="n">object</span><span class="o">.</span><span class="n">model_name</span> <span class="c1"># model_name is a method in rails.</span>
</span><span class='line'>        <span class="k">elsif</span> <span class="n">object</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="ss">:model_name</span><span class="p">)</span>
</span><span class='line'>          <span class="n">object</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">model_name</span> <span class="c1"># model_name is a method in rails.</span>
</span><span class='line'>        <span class="k">elsif</span> <span class="n">object</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="no">Class</span><span class="p">)</span>
</span><span class='line'>          <span class="n">object</span>
</span><span class='line'>        <span class="k">elsif</span> <span class="n">object</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="no">Symbol</span><span class="p">)</span>
</span><span class='line'>          <span class="n">object</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">classify</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="n">object</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>        <span class="s2">&quot;</span><span class="si">#{</span><span class="n">klass</span><span class="si">}</span><span class="s2">Policy&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Basically, all it is doing is appending &lsquo;Policy&rsquo; to the name of the object. The administrator may have put in different types of objects as an argument, or perhaps the administrator wanted a different policy for that object, the multiple conditions are done to check for them. In the end, if the object is @article, it finds the class of that, which is Article, and appends it to ArticlePolicy.</p>

<p>Now back to the singleton method <code>#policy(user, record)</code>!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span> <span class="c1"># Opens up Pundit&#39;s singletons. All methods inside are singletons</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">#... other code ...</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">policy!</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">record</span><span class="p">)</span> <span class="c1"># Finds the class policy and calls #new. Example: ArticlePolicy.new(user, record) and then admin&#39;s codes take over.</span>
</span><span class='line'>    <span class="no">PolicyFinder</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">record</span><span class="p">)</span><span class="o">.</span><span class="n">policy!</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">record</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we are doing <code>Article</code>, <code>PolicyFinder.new(record).policy!</code> returns <code>ArticlePolicy</code> which is then instantiated with <code>new(user, record)</code>. The contents of <code>ArticlePolicy</code> should be defined by the administrator inside the Rails app itself. The last and final step is to go back to the <code>authorize</code> method and check to see if the code defined by the administrator evaluates to true or false:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">authorize</span><span class="p">(</span><span class="n">record</span><span class="p">,</span> <span class="n">query</span><span class="o">=</span><span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="n">query</span> <span class="o">||=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:action</span><span class="o">].</span><span class="n">to_s</span> <span class="o">+</span> <span class="s2">&quot;?&quot;</span> <span class="c1"># Name of controller action</span>
</span><span class='line'>  <span class="vi">@_policy_authorized</span> <span class="o">=</span> <span class="kp">true</span> <span class="c1"># Flag to be used in #verify_authorized</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">policy</span> <span class="o">=</span> <span class="n">policy</span><span class="p">(</span><span class="n">record</span><span class="p">)</span> <span class="c1"># calls policy with the record object and through other helper_methods, it instantiates the class policy. For example, ArticlePolicy.new(user, record)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">unless</span> <span class="n">policy</span><span class="o">.</span><span class="n">public_send</span><span class="p">(</span><span class="n">query</span><span class="p">)</span> <span class="c1"># sends method? to the class policy. For example, it sends #create? to ArticlePolicy. If it is false, raise errors, otherwise return true.</span>
</span><span class='line'>    <span class="n">error</span> <span class="o">=</span> <span class="no">NotAuthorizedError</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;not allowed to </span><span class="si">#{</span><span class="n">query</span><span class="si">}</span><span class="s2"> this </span><span class="si">#{</span><span class="n">record</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">error</span><span class="o">.</span><span class="n">query</span><span class="p">,</span> <span class="n">error</span><span class="o">.</span><span class="n">record</span><span class="p">,</span> <span class="n">error</span><span class="o">.</span><span class="n">policy</span> <span class="o">=</span> <span class="n">query</span><span class="p">,</span> <span class="n">record</span><span class="p">,</span> <span class="n">policy</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">raise</span> <span class="n">error</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Policy is the instance of ArticlePolicy and unless <code>policy.public_send(query)</code>, for example if query is <code>create?</code>, is false, it raises an unauthorized error. Otherwise, it returns true and allows the user to perform the action.</p>

<p>There are two other commonly used methods provided by Pundit, they are <code>policy(record)</code> and <code>policy_scope(scope)</code>. Both of the methods follow a similar path as the <code>authorize</code> method, with only a few deviations. Otherwise, the meat of pundit has been covered.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Aerospace to MBA to Web Apps: How I Got Here]]></title>
    <link href="http://blog.ninjacorner.com/blog/2014/09/27/aerospace-to-mba-to-web-apps-how-i-got-here/"/>
    <updated>2014-09-27T22:54:10-07:00</updated>
    <id>http://blog.ninjacorner.com/blog/2014/09/27/aerospace-to-mba-to-web-apps-how-i-got-here</id>
    <content type="html"><![CDATA[<p>There is something peculiar about web app development; about how seemingly strange patterns of code that are there on the one side, and yet beautiful applications that emerge on the other side. It is this peculiarity that has driven me to ask “why”? It is this curiosity that has driven me to become who I am today, a web app developer, and each day to become a better developer than the previous. As I solve one problem, another presents itself, and again I continue the challenge.</p>

<p>I originally started life as a supply chain analyst in the aerospace industry <!-- more --> immediately after graduating from university. The pay was good and the job was stable. However, something wasn’t quite right. The things I was doing there; analyzing data, writing reports, and delivering presentations did not resonate with me. I didn’t feel like I was making anything new.</p>

<p>Strange events happened, and I scored a scholarship to study for an MBA in Japan. It would become an amazing learning experience for two years, both culturally and professionally. While it was a unique experience to be studying there, I realized something; I was still not making anything new.</p>

<p>Coinciding with the start of the second year of my MBA, I came across an online tutorial for web app development. One week later, I had developed my first Ruby on Rails application modeled after Pinterest. Two weeks after that, I had my second app. I was infatuated with coding. During the day, I would rush through my business assignments in order to get home and code at night. Finally, I was making something.</p>

<p>Today, I live in Seattle, developing web apps while enjoying this amazing city. I recently enrolled in Code Fellows, an intensive code school, in order to boost myself towards my goal of becoming a better developer each day. The ability to make new and amazing applications with just tapping the keyboard is an amazing feeling of accomplishment that brings me joy each day.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Ready for Codefellows' Ruby on Rails Accelerator]]></title>
    <link href="http://blog.ninjacorner.com/blog/2014/09/14/getting-ready-for-codefellows-ruby-on-rails-accelerator/"/>
    <updated>2014-09-14T15:49:09-07:00</updated>
    <id>http://blog.ninjacorner.com/blog/2014/09/14/getting-ready-for-codefellows-ruby-on-rails-accelerator</id>
    <content type="html"><![CDATA[<p>In the past few months, I have:</p>

<ul>
<li>finished all of my MBA requirements at Kwansei Gakuin University</li>
<li>left Japan and return to Reno, Nevada</li>
<li>moved to Seattle, Washington</li>
<li>completed the one month Codefellows foundations bootcamp</li>
<li>been accepted for the two months Codefellows Ruby on Rails Accelerator</li>
</ul>


<p>Phew! That&rsquo;s quite a life style change. As you can see, there are two types of modules in Codefellows that I have attended and will be attending; the foundations bootcamp, and the more advance Ruby on Rails Accelerator.</p>

<p>The foundations bootcamp was an intensive intro to CS and web development.<!-- more --> I had about a year worth of experience developing Ruby on Rails apps, and everything that was taught in class quickly made sense to me. What I really got out of it was the structure and best practices which I never knew before. In addition to that, the ability now to write pure JavaScript was a huge plus.</p>

<p>Starting tomorrow, I will be attending the first day of the Codefellows Ruby on Rails Accelerator. Again with this, I hope to absorb in best practices, and to obtain a deeper understanding of the magic that happens inside the Rails framework.</p>

<p>The whole day today, I have been preparing my computer by installing and/or updating a whole bunch of development software. Notably, Codefellows required that I had to uninstall RVM and instead install rbenv. I&rsquo;ve never used rbenv before, so this will be a new learning experience for me.</p>

<p>In any case, I plan to keep updating this blog with my experiences at Codefellows.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial: Incorporating Gridster to a Rails 4 App]]></title>
    <link href="http://blog.ninjacorner.com/blog/2014/05/06/tutorial-incorporating-gridster-to-a-rails-4-app/"/>
    <updated>2014-05-06T10:42:05-07:00</updated>
    <id>http://blog.ninjacorner.com/blog/2014/05/06/tutorial-incorporating-gridster-to-a-rails-4-app</id>
    <content type="html"><![CDATA[<h3>Intro</h3>

<p>Gridster, by Ducksboard, is a jQuery library for building drag and drop items in a grid layout. You can use it drag listed elements anywhere in the defined grid.</p>

<h3>Ensure proper configuration</h3>

<p>Before we begin, first we need to ensure that jQuery will work properly in Rails 4. Rails 4 by default has the <code>gem 'turbolinks'</code> in the gemfile, which will enhance your app&rsquo;s loading speed by refreshing only the contents in the <code>&lt;body&gt;</code> of your html files, but it may screw up some jQuery scripts. To fix this, include <code>gem 'jquery-turbolinks'</code> which will allow your jQuery scripts to fire up properly. After adding the <code>gem 'jquery-turbolinks'</code> to your gemfile, be sure to add <code>//= require jquery.turbolinks</code> just after <code>//= require jquery</code> to application.js and move <code>//= require turbolinks</code> to the very bottom of the list. Don&rsquo;t forget to perform bundle install. Now lets move on to the actual implementation.<!-- more --></p>

<h3>Lets add Gridster to our app!</h3>

<p><strong>First:</strong> Go to <a href="http://gridster.net/#download">http://gridster.net/#download</a> and download jquery.gridster.min.js and jquery.gridster.min.css.</p>

<p><strong>Second:</strong> Put jquery.gridster.min.js into the vendor/assets/javascripts and put the jquery.gridster.min.css file into the vendor/assets/stylesheets folder of the rails app.</p>

<p><strong>Third:</strong> Go to application.js and add <code>//= require jquery.gridster.min.js</code>. Then go to application.css and add <code>*= require jquery.gridster.min.css</code>.</p>

<p><strong>Fourth:</strong> In one of your stylesheets such as, custom_gridster.css.scss, add the follow code:</p>

<figure class='code'><figcaption><span>customer_gridster.scc.scss</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.gridster-cell</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">background-color</span><span class="o">:</span> <span class="m">#2EFEF7</span><span class="p">;</span>
</span><span class='line'>  <span class="k">list-style-type</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Fifth:</strong> Create a new file in app/assets/javascripts. For example, custom_gridster.js.coffee. Add the following line to activate the gridster scripts:</p>

<figure class='code'><figcaption><span>custom_gridster.js.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.gridster ul&quot;</span><span class="p">).</span><span class="nx">gridster</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">widget_margins</span><span class="o">:</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">],</span>
</span><span class='line'>      <span class="nx">widget_base_dimensions</span><span class="o">:</span> <span class="p">[</span><span class="mi">140</span><span class="p">,</span> <span class="mi">140</span><span class="p">]</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Sixth:</strong> In your view, wherever you want the gridster layout to be, add the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;gridster&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>        <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;gridster-cell&quot;</span> <span class="na">data-row=</span><span class="s">&quot;1&quot;</span> <span class="na">data-col=</span><span class="s">&quot;1&quot;</span> <span class="na">data-sizex=</span><span class="s">&quot;1&quot;</span> <span class="na">data-sizey=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;</span>Block1<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;gridster-cell&quot;</span> <span class="na">data-row=</span><span class="s">&quot;2&quot;</span> <span class="na">data-col=</span><span class="s">&quot;1&quot;</span> <span class="na">data-sizex=</span><span class="s">&quot;1&quot;</span> <span class="na">data-sizey=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;</span>Block2<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;gridster-cell&quot;</span> <span class="na">data-row=</span><span class="s">&quot;3&quot;</span> <span class="na">data-col=</span><span class="s">&quot;1&quot;</span> <span class="na">data-sizex=</span><span class="s">&quot;1&quot;</span> <span class="na">data-sizey=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;</span>Block3<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;gridster-cell&quot;</span> <span class="na">data-row=</span><span class="s">&quot;1&quot;</span> <span class="na">data-col=</span><span class="s">&quot;2&quot;</span> <span class="na">data-sizex=</span><span class="s">&quot;2&quot;</span> <span class="na">data-sizey=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;</span>Block4<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;gridster-cell&quot;</span> <span class="na">data-row=</span><span class="s">&quot;2&quot;</span> <span class="na">data-col=</span><span class="s">&quot;2&quot;</span> <span class="na">data-sizex=</span><span class="s">&quot;2&quot;</span> <span class="na">data-sizey=</span><span class="s">&quot;2&quot;</span><span class="nt">&gt;</span>Block5<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;gridster-cell&quot;</span> <span class="na">data-row=</span><span class="s">&quot;1&quot;</span> <span class="na">data-col=</span><span class="s">&quot;4&quot;</span> <span class="na">data-sizex=</span><span class="s">&quot;1&quot;</span> <span class="na">data-sizey=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;</span>Block6<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;gridster-cell&quot;</span> <span class="na">data-row=</span><span class="s">&quot;2&quot;</span> <span class="na">data-col=</span><span class="s">&quot;4&quot;</span> <span class="na">data-sizex=</span><span class="s">&quot;2&quot;</span> <span class="na">data-sizey=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;</span>Block7<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;gridster-cell&quot;</span> <span class="na">data-row=</span><span class="s">&quot;3&quot;</span> <span class="na">data-col=</span><span class="s">&quot;4&quot;</span> <span class="na">data-sizex=</span><span class="s">&quot;1&quot;</span> <span class="na">data-sizey=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;</span>Block8<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;gridster-cell&quot;</span> <span class="na">data-row=</span><span class="s">&quot;1&quot;</span> <span class="na">data-col=</span><span class="s">&quot;5&quot;</span> <span class="na">data-sizex=</span><span class="s">&quot;1&quot;</span> <span class="na">data-sizey=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;</span>Block9<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;gridster-cell&quot;</span> <span class="na">data-row=</span><span class="s">&quot;3&quot;</span> <span class="na">data-col=</span><span class="s">&quot;5&quot;</span> <span class="na">data-sizex=</span><span class="s">&quot;1&quot;</span> <span class="na">data-sizey=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;</span>Block10<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;gridster-cell&quot;</span> <span class="na">data-row=</span><span class="s">&quot;1&quot;</span> <span class="na">data-col=</span><span class="s">&quot;6&quot;</span> <span class="na">data-sizex=</span><span class="s">&quot;1&quot;</span> <span class="na">data-sizey=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;</span>Block11<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;gridster-cell&quot;</span> <span class="na">data-row=</span><span class="s">&quot;2&quot;</span> <span class="na">data-col=</span><span class="s">&quot;6&quot;</span> <span class="na">data-sizex=</span><span class="s">&quot;1&quot;</span> <span class="na">data-sizey=</span><span class="s">&quot;2&quot;</span><span class="nt">&gt;</span>Block12<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>data-row</code> is the y position and <code>data-col</code> is the x position. <code>data-sizex</code> is the length of the block and <code>data-sizey</code> is the height of the block. By changing those values you can manually reposition or resize the blocks.</p>

<p>Restart your server and take a look at your new Gridster layout.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moved to Octopress on Dokku!]]></title>
    <link href="http://blog.ninjacorner.com/blog/2014/04/26/moved-to-octopress/"/>
    <updated>2014-04-26T04:10:41-07:00</updated>
    <id>http://blog.ninjacorner.com/blog/2014/04/26/moved-to-octopress</id>
    <content type="html"><![CDATA[<p>So I have moved away from Wordpress and now on the hacker-friendly Octopress running on the mini-Heroku, Dokku. I also changed host from Godaddy to DigitalOcean, and there is definitely a speed increase with their SSDs.</p>

<p>Immediately, I experienced an issue on my first push of Octopress to Dokku. When I tried to view the blog on my browser, I recieved a Nginx gateway error. That was easily fixed however by ensuring that <code>gem 'thin'</code> is in the gemfile. After that, I just ran bundle install, git commit, and pushed it up to dokku and all was fine.</p>

<p>Here is what my gemfile looks like now</p>

<figure class='code'><figcaption><span>My Octopress Blog&#8217;s Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;rake&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 0.9&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;jekyll&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 0.12&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;rdiscount&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 2.0.7&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;pygments.rb&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 0.3.4&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;RedCloth&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 4.2.9&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;haml&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 3.1.7&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;compass&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 0.12.2&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;sass&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 3.2&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;sass-globbing&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 1.0.0&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;rubypants&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 0.2.0&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;rb-fsevent&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 0.9&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;stringex&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 1.4.0&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;liquid&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 2.3.0&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;directory_watcher&#39;</span><span class="p">,</span> <span class="s1">&#39;1.4.1&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="ss">:production</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;thin&#39;</span> <span class="c1"># Add this to your gemfile</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;sinatra&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 1.4.2&#39;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://blog.ninjacorner.com/blog/2014/04/25/hello-world/"/>
    <updated>2014-04-25T22:50:16-07:00</updated>
    <id>http://blog.ninjacorner.com/blog/2014/04/25/hello-world</id>
    <content type="html"><![CDATA[<h2>My first post with Octopress!!</h2>

<p>This is my first post to test Octopress.</p>

<p>This is a code snippet (just to test):</p>

<figure class='code'><figcaption><span>Testing Code Snippet</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cute_animals</span> <span class="o">=</span> <span class="o">[]</span> <span class="c1"># An array</span>
</span><span class='line'><span class="n">cute_animals</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;rabbits&#39;</span><span class="p">,</span> <span class="s1">&#39;dogs&#39;</span><span class="p">,</span> <span class="s1">&#39;hamsters&#39;</span> <span class="c1"># Appending to array</span>
</span></code></pre></td></tr></table></div></figure>


<p>Awesome. I am really liking Octopress. Time to migrate my old posts here.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Ruby Ruby JS?]]></title>
    <link href="http://blog.ninjacorner.com/blog/2014/04/10/ruby-ruby-ruby-js/"/>
    <updated>2014-04-10T02:20:52-07:00</updated>
    <id>http://blog.ninjacorner.com/blog/2014/04/10/ruby-ruby-ruby-js</id>
    <content type="html"><![CDATA[<p>In mid February, I took on a project to develop a web portal for the company I was interning at, Asterism Healthcare Plus. This would be my first work on a real project rather than tutorial projects, I did warn them of course, but due to budget constraint they let me work on it. I was paired up with another guy, Laurent Safa, who wasn’t part of Asterism, but was paid to consult and manage the database for Asterism. Unlike me, Laurent was well experienced in web development, and being paired up with him meant that I would learn a ton.</p>

<!--more-->


<p></p>

<p>Indeed, a month and a half later, I have finished my internship with a nice looking web portal to show. The portal has an Admin and Employees only page where they can view information on customers and products. Customers can also log into the portal to view their product’s current status as well as post comments on any issues. During this development, I honed my ruby skills, and now I am quite comfortable with ruby and not just rails. I started to use some jQuery and JavaScript as well for this project, I am still not quite an expert on that, but I am now making JavaScript my new priority to learn.</p>

<p>What’s my plan now? There are three things:</p>

<ul>
<li><p>-Learn JavaScript over the next couple of weeks</p></li>
<li><p>-Migrate this website from a WordPress site on Godaddy to a rails site possibly on Digital Ocean.</p></li>
<li><p>-Graduate from the MBA program over the next few months and land a job in a tech company in the bay area.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Addicted to Rails]]></title>
    <link href="http://blog.ninjacorner.com/blog/2014/01/21/addicted-to-rails/"/>
    <updated>2014-01-21T01:50:49-08:00</updated>
    <id>http://blog.ninjacorner.com/blog/2014/01/21/addicted-to-rails</id>
    <content type="html"><![CDATA[<p>In the summer of 2013, I started to question the value of my MBA. I mean, what can I DO with it? What can I BUILD with it? To correct this situation, I decided to take a deep dive into the world of computer programming.</p>

<p>I started with Codecademy. More specifically I took their python course, and well I managed to get about &frac34; of the way through, I couldn’t understand how I could BUILD anything with it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cool_variable</span> <span class="o">=</span> <span class="n">cool_stuff</span>
</span><span class='line'><span class="n">cool_variable</span>
</span><span class='line'><span class="c1"># =&gt; cool_stuff</span>
</span></code></pre></td></tr></table></div></figure>


<p>That’s about all I learned on the Python course in Codecademy.  So I stopped. I realized I wasted my time.</p>

<p>Then in September, I saw an ad on Facebook called “Onemonthrails.” I clicked on it (the only Facebook ad I ever clicked on purpose) and the next thing I knew, I paid $40 (now it’s about $100) to get access into an online video course that promised to make me a web app developer in one month! Well they lied. I made a web app in 1 and a half weeks! I blazed through the course every night without fail (all while doing my MBA classes during the day). Before I knew it, I was hooked.</p>

<!--more-->


<p></p>

<p>After finishing Onemonthrails, I spent the next month or two trying to develop a web app similar to Eventbrite. That’s when I realized that I have a lot to learn still. Countless times was I frustrated at mistakes I made and I would spend hours searching for the issue. I also realized another BIG problem. While I understood how to make the app at a 30,000 feet level, I didn’t understand it at a lower level, say 10,000 feet or 1,000 feet. I mean, just how exactly does the Model, View, and Controller work together? Why is it that when I type “rails generate scaffold Somethingcool” that all of a sudden all these files appeared in my app directory? I realized I needed to learn more about Rails.</p>

<p>Enter January 2014, I was busy preparing for my finals in the weeks coming, and I had just received an internship for a startup in Kobe, Japan. That’s also when I decided to get a copy of Michael Hartl’s Ruby on Rails Tutorial. It’s been two weeks since, and I have been steadily going through it. Managed to get about &frac34; of the way through the book so far and all I can say is that this book is truly gold for aspiring web developers. It has also cemented my desires for more Rails.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Knowledge Capital Is Leading the Startup Revolution in Osaka]]></title>
    <link href="http://blog.ninjacorner.com/blog/2013/12/20/knowledge-capital-is-leading-the-startup-revolution-in-osaka/"/>
    <updated>2013-12-20T01:55:25-08:00</updated>
    <id>http://blog.ninjacorner.com/blog/2013/12/20/knowledge-capital-is-leading-the-startup-revolution-in-osaka</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://blog.ninjacorner.com/images/knowledge-salon.jpg" title="Working in Knowledge Salon" ></p>

<p>What a small world. A few days ago I had lunch with Arthur Matsumoto, former SVP of Panasonic America and now part of an angel group with extensive connections in Hong Kong. I intended to ask him more about the startups that he is working with. Little did I know that he is also involved with the creation of Knowledge Capital, the organization that is running the Knowledge Salon, a large co-working and incubation space in the new Grand Front Osaka complex. Which so happens that I have a membership myself and often go there.</p>

<!--more-->


<p></p>

<p>According to Arthur, what he hopes to accomplish with Knowledge Capital is to create a strong connection between entrepreneurs in Osaka and Hong Kong in order to exchange knowledge and form new startups.  Startup teams are being sent through exchanges between the two locations, with Grand Front Osaka being the base here in Japan and the Hong Kong Science and Technology Park being the other in Hong Kong.</p>

<p>There are 2.5 million people who goes through Osaka every day, so naturally most would think that new ideas would constantly be shared and startups being formed. However, that is not the case. People simply do not talk to each other, and this is related to the culture. Knowledge Capital hopes to reverse this cultural issue and encourage the sharing of ideas.</p>

<p>Yet, nearly a year now since the opening of the Grant Front Osaka and the admission of members into the co-working space, people still are not talking to each other. This is a problem that Arthur admitted and I have observed when going there myself. There are lots of people going there to work, some individually, and some with their teams. However, there are no conversation between people outside of those they came with. Even the conversations to themselves are kept at a very low voice almost as if it is a library.</p>

<p>Nonetheless, at any given day in the Knowledge Salon, there are dozens of startups there working on their next big ideas. Here’s to the future of Osaka.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Social Norm - Don't Talk]]></title>
    <link href="http://blog.ninjacorner.com/blog/2013/12/14/social-norm-dont-talk/"/>
    <updated>2013-12-14T02:01:33-08:00</updated>
    <id>http://blog.ninjacorner.com/blog/2013/12/14/social-norm-dont-talk</id>
    <content type="html"><![CDATA[<p>One thing that I really miss about home is the ability to stand next to a stranger and say “Hi, how are you?” and start a conversation. You cannot find that here in Japan. Standing next to a stranger in Japan and saying “Genki desuka?” (equivalent of how are you) is just socially awkward. Of course it’s not all that bad, sometimes it’s really nice to commute on the train or bus in absolute silence. Imagine a packed train in Osaka with everyone speaking at once. if you are part of the conversation than that would be fun, but if you are trying to finish reading a chapter before the end of your commute then you might as well throw that book at someone’s face.</p>

<!--more-->


<p></p>

<p>I’m not quite sure where I stand on this matter. Truthfully I miss random conversations, but occasionally when I see people talking loudly on the train, I glare at them and beam a “shut up I’m trying to read, don’t you know its against social norms to be having fun on the train!?” Nonetheless, 99% of the commuters just sit quietly reading a book or playing games on their smart phones.</p>

<p>Since the social norm in Japan is to not speak to strangers in public, strange situations happen when suddenly two strangers bump into each other. For example, many times people bump into me, and sometimes pretty hard at the train station. Rarely do they say “sumimasen” (sorry/excuse me). It’s not because they are being rude, but because social norms dictate that they shouldn’t speak. Of course sometimes my American side comes in and I just want to yell out “SAY SORRY TO ME!”</p>

<p>It’s also interesting to see people trying to communicate with strangers on the train without actually speaking. For example, a person sitting down may try to make himself/herself smaller by scooting closer to the side in an effort to send a “you can sit next to me” signal to a nearby standing person. There is no verbal communication between both sides, and it’s up to the standing person to notice the invitation, and whether he or she accepts to sit down. Oh and there is absolutely no eye contact, usually both are just staring down at the ground.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Japanese Companies Cannot Expand (Hint: Recruitment System)]]></title>
    <link href="http://blog.ninjacorner.com/blog/2013/12/11/why-japanese-companies-cannot-expand-hint-recruitment-system/"/>
    <updated>2013-12-11T02:05:53-08:00</updated>
    <id>http://blog.ninjacorner.com/blog/2013/12/11/why-japanese-companies-cannot-expand-hint-recruitment-system</id>
    <content type="html"><![CDATA[<p>Japan’s economy over the past 23 years can be described with words like “shrunk,” “stalled,” or “deflated.” The reason is simple, Japanese companies have an inability to target customers beyond those who speaks Japanese. While there are many growing opportunities in the world, Japanese companies continue to fail in grabbing those opportunities. So how can these companies expand beyond their borders? First they need to start recruiting educated foreign employees who can speak multiple languages and understand foreign cultures. However, the current recruiting system is so structured that it is nearly impossible for foreign citizens living inside or outside Japan to participate in.</p>

<!--more-->


<p></p>

<p>Job hunting in Japan, known as shushoku katsudo (就職活動), formally starts December 1st of each year for students who are within two years of graduating university. However, students have already begun going to company hosted seminars and even taking an intelligence test (required by many companies) well before the formal start date. On December 1st, all Japanese companies starts hosting interviews, sometimes in groups or individually, over the course of several months. Candidates are expected to go through multiple rounds from five to as much as a dozen interviews (yes for one company). As candidates pass each round, they go up to be interviewed by a higher authority, and many times even interviewed by the CEO or members of the board of directors (yes, for entry level positions). So you can imagine the numbers of interviews and preparations a third year university student has to go through as she or he applies for multiple companies. During this period, most students skip their studies and classes, as they go through almost daily interviews.</p>

<p>If you are a foreigner and do not speak perfect Japanese, it would be double difficult to comprehend the system and land a job. If you live outside of Japan, well most likely you will miss the entire recruiting process. The system has so many barriers for a foreigner to enter.</p>

<p>Yet at this dire time in the Japanese economy, foreign employees are just what they need. The population of Japan is shrinking at an alarming rate, and Japan needs educated foreign workers to replace unoccupied positions, and help expand beyond their domestic borders.</p>

<p>Japanese companies need to start implementing a foreigner friendly recruiting system. One possible method is an internship program for foreign students. A second method is to start recruiting mid-career foreigners who have a high degree of knowledge in specific fields. However many Japanese companies don’t even recruit other mid-career Japanese, so it’s difficult to see them start now. Though, some companies are slowly changing to these new ideas, it will be at least another decade before real change can be seen.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Internships in Japan? (Laugh)]]></title>
    <link href="http://blog.ninjacorner.com/blog/2013/12/11/internships-in-japan-laugh/"/>
    <updated>2013-12-11T02:03:05-08:00</updated>
    <id>http://blog.ninjacorner.com/blog/2013/12/11/internships-in-japan-laugh</id>
    <content type="html"><![CDATA[<p>One of my close friend recently started a two week internship in Osaka. Her day to day responsibilities? Clean desks and make coffee. Hardly productive and educational for students. However she was one of the lucky ones, why? Because most Japanese companies do not know what an internship is, and if they do have an internship program, it is for two to three days.</p>

<!--more-->


<p></p>

<p>Two weeks ago, an ACCJ (American Chambers of Commerce in Japan) held a conference in Osaka discussing the necessities for Japanese companies to implement western style internships. The reality is that Japanese companies hardly offer internships and this is tied to their corporate culture being a limiting factor. The sempai-kohai (senior-junior) relationship of work style is the ultimate culprit. If you hire an intern, where do you put the intern into the sempai-kohai hierarchy?</p>

<p>When Japanese graduate from university and enter their respective companies, they are placed in their first year class. This first year class usually involves working in the manufacturing floor (if a manufacturing company) or going to customers’ houses and greeting them (if a service company). As they age each year, the class of employees would go up one level (for example, moving from the manufacturing floor to the the copy room). See the problem?</p>

<p>If you stick an intern into a meaningful position like assisting the marketing department, he/she just skipped the first or second year of his/her class. So is this intern a sempai or a kohai to those who are in their first or two years of employment? Who are this intern’s equals? That one intern would have completely messed up the entire societal norms in the company.</p>

<p>In recent years some companies started to offer “internships.” However, these companies are using it unproductively as a way for students to observe the company. Most “internships” would last two to three days, and students are given a tour and explanation about some of the work being done in a specific office.</p>

<p>So implementing a full fledge internship program in Japan would require a complete overhaul of the recruiting system and overhaul of the sempai-kohai relationship system prevalent in the corporate culture here. That’s a big task, and not one that will happen soon.</p>
]]></content>
  </entry>
  
</feed>
